{"version":3,"file":"elem.js","sources":["../../src/elem.js"],"sourcesContent":["import {select} from \"d3-selection\";\nimport {transition} from \"d3-transition\";\n\nimport {default as attrize} from \"./attrize\";\n\n/**\n    @function elem\n    @desc Manages the enter/update/exit pattern for a single DOM element.\n    @param {String} selector A D3 selector, which must include the tagname and a class and/or ID.\n    @param {Object} params Additional parameters.\n    @param {Boolean} [params.condition = true] Whether or not the element should be rendered (or removed).\n    @param {Object} [params.enter = {}] A collection of key/value pairs that map to attributes to be given on enter.\n    @param {Object} [params.exit = {}] A collection of key/value pairs that map to attributes to be given on exit.\n    @param {D3Selection} [params.parent = d3.select(\"body\")] The parent element for this new element to be appended to.\n    @param {D3Transition} [params.transition = d3.transition().duration(0)] The transition to use when animated the different life cycle stages.\n    @param {Object} [params.update = {}] A collection of key/value pairs that map to attributes to be given on update.\n*/\nexport default function(selector, p) {\n\n  // overrides default params\n  p = Object.assign({}, {\n    condition: true,\n    enter: {},\n    exit: {},\n    parent: select(\"body\"),\n    transition: transition().duration(0),\n    update: {}\n  }, p);\n\n  const className = (/\\.([^#]+)/g).exec(selector),\n        id = (/#([^\\.]+)/g).exec(selector),\n        tag = (/^([^.^#]+)/g).exec(selector)[1];\n\n  const elem = p.parent.selectAll(selector.includes(\":\") ? selector.split(\":\")[1] : selector)\n    .data(p.condition ? [null] : []);\n\n  const enter = elem.enter().append(tag).call(attrize, p.enter);\n\n  if (id) enter.attr(\"id\", id[1]);\n  if (className) enter.attr(\"class\", className[1]);\n\n  elem.exit().transition(p.transition).call(attrize, p.exit).remove();\n\n  const update = enter.merge(elem);\n  update.transition(p.transition).call(attrize, p.update);\n\n  return update;\n\n}\n"],"names":["const"],"mappings":"AAAA,QAAQ,MAAM,OAAO,cAAc,CAAC;AACpC,QAAQ,UAAU,OAAO,eAAe,CAAC;;AAEzC,QAAQ,OAAO,IAAI,OAAO,OAAO,WAAW,CAAC;;;;;;;;;;;;;;AAc7C,eAAe,SAAS,QAAQ,EAAE,CAAC,EAAE;;;EAGnC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;IACpB,SAAS,EAAE,IAAI;IACf,KAAK,EAAE,EAAE;IACT,IAAI,EAAE,EAAE;IACR,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;IACtB,UAAU,EAAE,UAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpC,MAAM,EAAE,EAAE;GACX,EAAE,CAAC,CAAC,CAAC;;EAENA,GAAK,CAAC,SAAS,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzC,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;QAClC,GAAG,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9CA,GAAK,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;KACxF,IAAI,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;;EAEnCA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;;EAE9D,IAAI,EAAE,IAAE,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAC;EAChC,IAAI,SAAS,IAAE,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,GAAC;;EAEjD,IAAI,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;;EAEpEA,GAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;EACjC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;;EAExD,OAAO,MAAM,CAAC;;CAEf;"}