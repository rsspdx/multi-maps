{"version":3,"file":"saveElement.js","sources":["../../src/saveElement.js"],"sourcesContent":["import \"canvas-toBlob\";\nimport {saveAs} from \"file-saver\";\n// import JsPDF from \"jspdf\";\n\nimport dom2canvas from \"./dom2canvas\";\n\nconst defaultOptions = {\n  filename: \"download\",\n  type: \"png\"\n};\n\n/**\n    @function saveElement\n    @desc Downloads an HTML Element as a bitmap PNG image.\n    @param {HTMLElement|Array} elem A single element or array of elements to be saved to one file.\n    @param {Object} [options] Additional options to specify.\n    @param {String} [options.filename = \"download\"] Filename for the downloaded file, without the extension.\n    @param {String} [options.type = \"png\"] File type of the saved document. Accepted values are `\"png\"` and `\"jpg\"`.\n    @param {Object} [renderOptions] Custom options to be passed to the dom2canvas function.\n*/\nexport default function(elem, options = {}, renderOptions = {}) {\n\n  if (!elem) return;\n  options = Object.assign({}, defaultOptions, options);\n\n  const IE = new RegExp(/(MSIE|Trident\\/|Edge\\/)/i).test(navigator.userAgent);\n\n  if (!(elem instanceof Array) && options.type === \"svg\") {\n    const outer = IE ? (new XMLSerializer()).serializeToString(elem) : elem.outerHTML;\n    saveAs(new Blob([outer], {type: \"application/svg+xml\"}), `${options.filename}.svg`);\n  }\n\n  dom2canvas(elem, Object.assign({}, renderOptions, {callback: canvas => {\n\n    if (renderOptions.callback) renderOptions.callback(canvas);\n\n    if ([\"jpg\", \"png\"].includes(options.type)) {\n      canvas.toBlob(blob => saveAs(blob, `${options.filename}.${options.type}`));\n    }\n    // else if (options.type === \"pdf\") {\n\n    //   const outputHeight = 11,\n    //         outputWidth = 8.5;\n\n    //   const aspect = canvas.width / canvas.height,\n    //         orientation = aspect > 1 ? \"landscape\" : \"portrait\";\n\n    //   const pdf = new JsPDF({\n    //     orientation,\n    //     unit: \"in\",\n    //     format: [outputWidth, outputHeight]\n    //   });\n\n    //   let h = orientation === \"landscape\" ? outputWidth : outputHeight,\n    //       left,\n    //       top,\n    //       w = orientation === \"landscape\" ? outputHeight : outputWidth;\n\n    //   const margin = 0.5;\n\n    //   if (aspect < w / h) {\n    //     h -= margin * 2;\n    //     const tempWidth = h * aspect;\n    //     top = margin;\n    //     left = (w - tempWidth) / 2;\n    //     w = tempWidth;\n    //   }\n    //   else {\n    //     w -= margin * 2;\n    //     const tempHeight = w / aspect;\n    //     left = margin;\n    //     top = (h - tempHeight) / 2;\n    //     h = tempHeight;\n    //   }\n\n    //   pdf.addImage(canvas, \"canvas\", left, top, w, h);\n    //   pdf.save(options.filename);\n\n    // }\n\n  }}));\n\n}\n"],"names":["const"],"mappings":"AAAA,OAAO,eAAe,CAAC;AACvB,QAAQ,MAAM,OAAO,YAAY,CAAC;;;AAGlC,OAAO,UAAU,MAAM,cAAc,CAAC;;AAEtCA,GAAK,CAAC,cAAc,GAAG;EACrB,QAAQ,EAAE,UAAU;EACpB,IAAI,EAAE,KAAK;CACZ,CAAC;;;;;;;;;;;AAWF,eAAe,SAAS,IAAI,EAAE,OAAY,EAAE,aAAkB,EAAE;mCAA3B,GAAG;+CAAiB,GAAG;AAAK;;EAE/D,IAAI,CAAC,IAAI,IAAE,SAAO;EAClB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;;EAErDA,GAAK,CAAC,EAAE,GAAG,IAAI,MAAM,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;;EAE5E,IAAI,CAAC,CAAC,IAAI,YAAY,KAAK,CAAC,IAAI,OAAO,CAAC,IAAI,KAAK,KAAK,EAAE;IACtDA,GAAK,CAAC,KAAK,GAAG,EAAE,GAAG,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;IAClF,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,qBAAqB,CAAC,CAAC,EAAE,EAAG,OAAO,CAAC,SAAQ,UAAM,CAAC,CAAC;GACrF;;EAED,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,EAAE,CAAC,QAAQ,YAAE,OAAM,CAAC,AAAG;;IAErE,IAAI,aAAa,CAAC,QAAQ,IAAE,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAC;;IAE3D,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;MACzC,MAAM,CAAC,MAAM,WAAC,KAAI,CAAC,SAAG,MAAM,CAAC,IAAI,EAAE,EAAG,OAAO,CAAC,SAAQ,UAAI,OAAO,CAAC,IAAI,EAAE,IAAC,CAAC,CAAC;KAC5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CF,CAAC,CAAC,CAAC,CAAC;;CAEN;"}