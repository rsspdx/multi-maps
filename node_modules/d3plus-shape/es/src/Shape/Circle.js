import {accessor, assign, constant} from "d3plus-common";

import Shape from "./Shape";

/**
    @class Circle
    @extends Shape
    @desc Creates SVG circles based on an array of data.
*/
var Circle = (function (Shape) {
  function Circle() {
    Shape.call(this, "circle");
    this._labelBounds = function (d, i, s) { return ({width: s.r * 1.5, height: s.r * 1.5, x: -s.r * 0.75, y: -s.r * 0.75}); };
    this._labelConfig = assign(this._labelConfig, {
      textAnchor: "middle",
      verticalAlign: "middle"
    });
    this._name = "Circle";
    this._r = accessor("r");
  }

  if ( Shape ) Circle.__proto__ = Shape;
  Circle.prototype = Object.create( Shape && Shape.prototype );
  Circle.prototype.constructor = Circle;

  /**
      @memberof Circle
      @desc Provides the default positioning to the <rect> elements.
      @private
  */
  Circle.prototype._applyPosition = function _applyPosition (elem) {
    var this$1 = this;

    elem
      .attr("r", function (d, i) { return this$1._r(d, i); })
      .attr("x", function (d, i) { return -this$1._r(d, i) / 2; })
      .attr("y", function (d, i) { return -this$1._r(d, i) / 2; });
  };

  /**
      @memberof Circle
      @desc Draws the circles.
      @param {Function} [*callback*]
      @chainable
  */
  Circle.prototype.render = function render (callback) {

    Shape.prototype.render.call(this, callback);

    this._enter
      .attr("r", 0).attr("x", 0).attr("y", 0)
      .call(this._applyStyle.bind(this))
      .transition(this._transition)
      .call(this._applyPosition.bind(this));

    this._update.transition(this._transition)
      .call(this._applyStyle.bind(this))
      .call(this._applyPosition.bind(this));

    this._exit.transition(this._transition)
      .attr("r", 0).attr("x", 0).attr("y", 0);

    return this;

  };

  /**
      @memberof Circle
      @desc Given a specific data point and index, returns the aesthetic properties of the shape.
      @param {Object} *data point*
      @param {Number} *index*
      @private
  */
  Circle.prototype._aes = function _aes (d, i) {
    return {r: this._r(d, i)};
  };

  /**
      @memberof Circle
      @desc If *value* is specified, sets the radius accessor to the specified function or number and returns the current class instance.
      @param {Function|Number} [*value*]
      @chainable
      @example
function(d) {
  return d.r;
}
  */
  Circle.prototype.r = function r (_) {
    return arguments.length ? (this._r = typeof _ === "function" ? _ : constant(_), this) : this._r;
  };

  return Circle;
}(Shape));

export default Circle;

//# sourceMappingURL=Circle.js.map