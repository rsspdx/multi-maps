import {select} from "d3-selection";

import {accessor, assign, BaseClass, configPrep, constant, elem} from "d3plus-common";
import {nest} from "d3-collection";

import Circle from "./Circle";
import Line from "./Line";
import Rect from "./Rect";

var shapes = {Circle: Circle, Rect: Rect};

/**
    @class Whisker
    @extends BaseClass
    @desc Creates SVG whisker based on an array of data.
*/
var Whisker = (function (BaseClass) {
  function Whisker() {

    BaseClass.call(this);

    this._endpoint = accessor("endpoint", "Rect");
    this._endpointConfig = {
      Circle: {
        r: accessor("r", 5)
      }
    };
    this._length = accessor("length", 25);
    this._lineConfig = {};
    this._orient = accessor("orient", "top");
    this._x = accessor("x", 0);
    this._y = accessor("y", 0);

  }

  if ( BaseClass ) Whisker.__proto__ = BaseClass;
  Whisker.prototype = Object.create( BaseClass && BaseClass.prototype );
  Whisker.prototype.constructor = Whisker;

  /**
      @memberof Whisker
      @desc Draws the whisker.
      @param {Function} [*callback*]
      @chainable
  */
  Whisker.prototype.render = function render (callback) {
    var this$1 = this;


    if (this._select === void 0) {
      this.select(select("body").append("svg")
        .style("width", ((window.innerWidth) + "px"))
        .style("height", ((window.innerHeight) + "px"))
        .style("display", "block").node());
    }

    var lineData = [];
    this._data.forEach(function (d, i) {

      var orient = this$1._orient(d, i);
      var x = this$1._x(d, i);
      var y = this$1._y(d, i);

      var endpointX = x;
      if (orient === "left") { endpointX -= this$1._length(d, i); }
      else if (orient === "right") { endpointX += this$1._length(d, i); }

      var endpointY = y;
      if (orient === "top") { endpointY -= this$1._length(d, i); }
      else if (orient === "bottom") { endpointY += this$1._length(d, i); }

      lineData.push({__d3plus__: true, data: d, i: i, id: i, x: x, y: y});
      lineData.push({__d3plus__: true, data: d, i: i, id: i, x: endpointX, y: endpointY});
    });

    // Draw whisker line.
    this._line = new Line()
      .data(lineData)
      .select(elem("g.d3plus-Whisker", {parent: this._select}).node())
      .config(configPrep.bind(this)(this._lineConfig, "shape"))
      .render(callback);

    var whiskerData = this._data.map(function (d, i) {

      var dataObj = {};
      dataObj.__d3plus__ = true;
      dataObj.data = d;
      dataObj.i = i;
      dataObj.endpoint = this$1._endpoint(d, i);
      dataObj.length = this$1._length(d, i);
      dataObj.orient = this$1._orient(d, i);

      var endpointX = this$1._x(d, i);
      if (dataObj.orient === "left") { endpointX -= dataObj.length; }
      else if (dataObj.orient === "right") { endpointX += dataObj.length; }

      var endpointY = this$1._y(d, i);
      if (dataObj.orient === "top") { endpointY -= dataObj.length; }
      else if (dataObj.orient === "bottom") { endpointY += dataObj.length; }

      dataObj.x = endpointX;
      dataObj.y = endpointY;

      return dataObj;

    });

    // Draw whisker endpoint.
    this._whiskerEndpoint = [];
    nest()
      .key(function (d) { return d.endpoint; })
      .entries(whiskerData)
      .forEach(function (shapeData) {
        var shapeName = shapeData.key;
        this$1._whiskerEndpoint.push(new shapes[shapeName]()
          .data(shapeData.values)
          .select(elem(("g.d3plus-Whisker-Endpoint-" + shapeName), {parent: this$1._select}).node())
          .config({
            height: function (d) { return d.orient === "top" || d.orient === "bottom" ? 5 : 20; },
            width: function (d) { return d.orient === "top" || d.orient === "bottom" ? 20 : 5; }
          })
          .config(configPrep.bind(this$1)(this$1._endpointConfig, "shape", shapeName))
          .render());
      });

    return this;

  };

  /**
      @memberof Whisker
      @desc Sets the highlight accessor to the Shape class's active function.
      @param {Function} [*value*]
      @chainable
  */
  Whisker.prototype.active = function active (_) {
    if (this._line) { this._line.active(_); }
    if (this._whiskerEndpoint) { this._whiskerEndpoint.forEach(function (endPoint) { return endPoint.active(_); }); }
  };

  /**
      @memberof Whisker
      @desc If *data* is specified, sets the data array to the specified array and returns the current class instance. If *data* is not specified, returns the current data array.
      @param {Array} [*data* = []]
      @chainable
  */
  Whisker.prototype.data = function data (_) {
    return arguments.length ? (this._data = _, this) : this._data;
  };

  /**
      @memberof Whisker
      @desc If *value* is specified, sets the endpoint accessor to the specified function or string and returns the current class instance.
      @param {Function|String}
      @chainable
  */
  Whisker.prototype.endpoint = function endpoint (_) {
    return arguments.length ? (this._endpoint = typeof _ === "function" ? _ : constant(_), this) : this._endpoint;
  };

  /**
      @memberof Whisker
      @desc If *value* is specified, sets the config method for each endpoint and returns the current class instance.
      @param {Object} [*value*]
      @chainable
  */
  Whisker.prototype.endpointConfig = function endpointConfig (_) {
    return arguments.length ? (this._endpointConfig = assign(this._endpointConfig, _), this) : this._endpointConfig;
  };

  /**
      @memberof Whisker
      @desc Sets the highlight accessor to the Shape class's hover function.
      @param {Function} [*value*]
      @chainable
  */
  Whisker.prototype.hover = function hover (_) {
    if (this._line) { this._line.hover(_); }
    if (this._whiskerEndpoint) { this._whiskerEndpoint.forEach(function (endPoint) { return endPoint.hover(_); }); }
  };

  /**
      @memberof Whisker
      @desc If *value* is specified, sets the length accessor for whisker and returns the current class instance.
      @param {Function|Number} [*value*]
      @chainable
  */
  Whisker.prototype.length = function length (_) {
    return arguments.length ? (this._length = typeof _ === "function" ? _ : constant(_), this) : this._length;
  };

  /**
      @memberof Whisker
      @desc If *value* is specified, sets the config method for line shape and returns the current class instance.
      @param {Object} [*value*]
      @chainable
  */
  Whisker.prototype.lineConfig = function lineConfig (_) {
    return arguments.length ? (this._lineConfig = assign(this._lineConfig, _), this) : this._lineConfig;
  };
  
  /**
      @memberof Whisker
      @desc If *value* is specified, sets the orientation to the specified value. If *value* is not specified, returns the current orientation.
      @param {Function|String} [*value* = "top"] Accepts "top", "right", "bottom" or "left"
      @chainable
  */
  Whisker.prototype.orient = function orient (_) {
    return arguments.length ? (this._orient = typeof _ === "function" ? _ : constant(_), this) : this._orient;
  };

  /**
      @memberof Whisker
      @desc If *selector* is specified, sets the SVG container element to the specified d3 selector or DOM element and returns the current class instance. If *selector* is not specified, returns the current SVG container element.
      @param {String|HTMLElement} [*selector* = d3.select("body").append("svg")]
      @chainable
  */
  Whisker.prototype.select = function select$1 (_) {
    return arguments.length ? (this._select = select(_), this) : this._select;
  };

  /**
    @memberof Whisker
    @desc If *value* is specified, sets the x axis to the specified function or number and returns the current class instance.
    @param {Function|Number} [*value*]
    @chainable
    @example
function(d) {
  return d.x;
}
  */
  Whisker.prototype.x = function x (_) {
    return arguments.length ? (this._x = typeof _ === "function" ? _ : constant(_), this) : this._x;
  };

  /**
      @memberof Whisker
      @desc If *value* is specified, sets the y axis to the specified function or number and returns the current class instance.
      @param {Function|Number} [*value*]
      @chainable
      @example
function(d) {
  return d.y;
}
  */
  Whisker.prototype.y = function y (_) {
    return arguments.length ? (this._y = typeof _ === "function" ? _ : constant(_), this) : this._y;
  };

  return Whisker;
}(BaseClass));

export default Whisker;

//# sourceMappingURL=Whisker.js.map