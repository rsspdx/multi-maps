{"version":3,"file":"largestRect.js","sources":["../../../src/geom/largestRect.js"],"sourcesContent":["import {extent, merge, range} from \"d3-array\";\nimport {polygonArea, polygonCentroid, polygonContains} from \"d3-polygon\";\n\nimport polygonInside from \"./polygonInside\";\nimport polygonRayCast from \"./polygonRayCast\";\nimport polygonRotate from \"./polygonRotate\";\nimport simplify from \"./simplify\";\nimport pointDistanceSquared from \"./pointDistanceSquared\";\n\n// Algorithm constants\nconst aspectRatioStep = 0.5; // step size for the aspect ratio\nconst angleStep = 5; // step size for angles (in degrees); has linear impact on running time\n\nconst polyCache = {};\n\n/**\n    @typedef {Object} LargestRect\n    @desc The returned Object of the largestRect function.\n    @property {Number} width The width of the rectangle\n    @property {Number} height The height of the rectangle\n    @property {Number} cx The x coordinate of the rectangle's center\n    @property {Number} cy The y coordinate of the rectangle's center\n    @property {Number} angle The rotation angle of the rectangle in degrees. The anchor of rotation is the center point.\n    @property {Number} area The area of the largest rectangle.\n    @property {Array} points An array of x/y coordinates for each point in the rectangle, useful for rendering paths.\n*/\n\n/**\n    @function largestRect\n    @author Daniel Smilkov [dsmilkov@gmail.com]\n    @desc An angle of zero means that the longer side of the polygon (the width) will be aligned with the x axis. An angle of 90 and/or -90 means that the longer side of the polygon (the width) will be aligned with the y axis. The value can be a number between -90 and 90 specifying the angle of rotation of the polygon, a string which is parsed to a number, or an array of numbers specifying the possible rotations of the polygon.\n    @param {Array} poly An Array of points that represent a polygon.\n    @param {Object} [options] An Object that allows for overriding various parameters of the algorithm.\n    @param {Number|String|Array} [options.angle = d3.range(-90, 95, 5)] The allowed rotations of the final rectangle.\n    @param {Number|String|Array} [options.aspectRatio] The ratio between the width and height of the rectangle. The value can be a number, a string which is parsed to a number, or an array of numbers specifying the possible aspect ratios of the final rectangle.\n    @param {Number} [options.maxAspectRatio = 15] The maximum aspect ratio (width/height) allowed for the rectangle. This property should only be used if the aspectRatio is not provided.\n    @param {Number} [options.minAspectRatio = 1] The minimum aspect ratio (width/height) allowed for the rectangle. This property should only be used if the aspectRatio is not provided.\n    @param {Number} [options.nTries = 20] The number of randomly drawn points inside the polygon which the algorithm explores as possible center points of the maximal rectangle.\n    @param {Number} [options.minHeight = 0] The minimum height of the rectangle.\n    @param {Number} [options.minWidth = 0] The minimum width of the rectangle.\n    @param {Number} [options.tolerance = 0.02] The simplification tolerance factor, between 0 and 1. A larger tolerance corresponds to more extensive simplification.\n    @param {Array} [options.origin] The center point of the rectangle. If specified, the rectangle will be fixed at that point, otherwise the algorithm optimizes across all possible points. The given value can be either a two dimensional array specifying the x and y coordinate of the origin or an array of two dimensional points specifying multiple possible center points of the rectangle.\n    @param {Boolean} [options.cache] Whether or not to cache the result, which would be used in subsequent calculations to preserve consistency and speed up calculation time.\n    @return {LargestRect}\n*/\nexport default function(poly, options = {}) {\n\n  if (poly.length < 3) {\n    if (options.verbose) console.error(\"polygon has to have at least 3 points\", poly);\n    return null;\n  }\n\n  // For visualization debugging purposes\n  const events = [];\n\n  // User's input normalization\n  options = Object.assign({\n    angle: range(-90, 90 + angleStep, angleStep),\n    cache: true,\n    maxAspectRatio: 15,\n    minAspectRatio: 1,\n    minHeight: 0,\n    minWidth: 0,\n    nTries: 20,\n    tolerance: 0.02,\n    verbose: false\n  }, options);\n\n  const angles = options.angle instanceof Array ? options.angle\n    : typeof options.angle === \"number\" ? [options.angle]\n    : typeof options.angle === \"string\" && !isNaN(options.angle) ? [Number(options.angle)]\n    : [];\n\n  const aspectRatios = options.aspectRatio instanceof Array ? options.aspectRatio\n    : typeof options.aspectRatio === \"number\" ? [options.aspectRatio]\n    : typeof options.aspectRatio === \"string\" && !isNaN(options.aspectRatio) ? [Number(options.aspectRatio)]\n    : [];\n\n  const origins = options.origin && options.origin instanceof Array\n    ? options.origin[0] instanceof Array ? options.origin\n    : [options.origin] : [];\n\n  let cacheString;\n  if (options.cache) {\n    cacheString = merge(poly).join(\",\");\n    cacheString += `-${options.minAspectRatio}`;\n    cacheString += `-${options.maxAspectRatio}`;\n    cacheString += `-${options.minHeight}`;\n    cacheString += `-${options.minWidth}`;\n    cacheString += `-${angles.join(\",\")}`;\n    cacheString += `-${origins.join(\",\")}`;\n    if (polyCache[cacheString]) return polyCache[cacheString];\n  }\n\n  const area = Math.abs(polygonArea(poly)); // take absolute value of the signed area\n  if (area === 0) {\n    if (options.verbose) console.error(\"polygon has 0 area\", poly);\n    return null;\n  }\n  // get the width of the bounding box of the original polygon to determine tolerance\n  let [minx, maxx] = extent(poly, d => d[0]);\n  let [miny, maxy] = extent(poly, d => d[1]);\n\n  // simplify polygon\n  const tolerance = Math.min(maxx - minx, maxy - miny) * options.tolerance;\n\n  if (tolerance > 0) poly = simplify(poly, tolerance);\n  if (options.events) events.push({type: \"simplify\", poly});\n\n  // get the width of the bounding box of the simplified polygon\n  [minx, maxx] = extent(poly, d => d[0]);\n  [miny, maxy] = extent(poly, d => d[1]);\n  const [boxWidth, boxHeight] = [maxx - minx, maxy - miny];\n\n  // discretize the binary search for optimal width to a resolution of this times the polygon width\n  const widthStep = Math.min(boxWidth, boxHeight) / 50;\n\n  // populate possible center points with random points inside the polygon\n  if (!origins.length) {\n    // get the centroid of the polygon\n    const centroid = polygonCentroid(poly);\n    if (isNaN(centroid[0])) {\n      if (options.verbose) console.error(\"cannot find centroid\", poly);\n      return null;\n    }\n    if (polygonContains(poly, centroid)) origins.push(centroid);\n    // get few more points inside the polygon\n    while (origins.length < options.nTries) {\n      const rndX = Math.random() * boxWidth + minx;\n      const rndY = Math.random() * boxHeight + miny;\n      const rndPoint = [rndX, rndY];\n      if (polygonContains(poly, rndPoint)) origins.push(rndPoint);\n    }\n  }\n  if (options.events) events.push({type: \"origins\", points: origins});\n  let maxArea = 0;\n  let maxRect = null;\n\n  for (let ai = 0; ai < angles.length; ai++) {\n    const angle = angles[ai];\n    const angleRad = -angle * Math.PI / 180;\n    if (options.events) events.push({type: \"angle\", angle});\n    for (let i = 0; i < origins.length; i++) {\n      const origOrigin = origins[i];\n      // generate improved origins\n      const [p1W, p2W] = polygonRayCast(poly, origOrigin, angleRad);\n      const [p1H, p2H] = polygonRayCast(poly, origOrigin, angleRad + Math.PI / 2);\n      const modifOrigins = [];\n      if (p1W && p2W) modifOrigins.push([(p1W[0] + p2W[0]) / 2, (p1W[1] + p2W[1]) / 2]); // average along with width axis\n      if (p1H && p2H) modifOrigins.push([(p1H[0] + p2H[0]) / 2, (p1H[1] + p2H[1]) / 2]); // average along with height axis\n\n      if (options.events) events.push({type: \"modifOrigin\", idx: i, p1W, p2W, p1H, p2H, modifOrigins});\n\n      for (let i = 0; i < modifOrigins.length; i++) {\n\n        const origin = modifOrigins[i];\n\n        if (options.events) events.push({type: \"origin\", cx: origin[0], cy: origin[1]});\n\n        const [p1W, p2W] = polygonRayCast(poly, origin, angleRad);\n        if (p1W === null || p2W === null) continue;\n        const minSqDistW = Math.min(pointDistanceSquared(origin, p1W), pointDistanceSquared(origin, p2W));\n        const maxWidth = 2 * Math.sqrt(minSqDistW);\n\n        const [p1H, p2H] = polygonRayCast(poly, origin, angleRad + Math.PI / 2);\n        if (p1H === null || p2H === null) continue;\n        const minSqDistH = Math.min(pointDistanceSquared(origin, p1H), pointDistanceSquared(origin, p2H));\n        const maxHeight = 2 * Math.sqrt(minSqDistH);\n\n        if (maxWidth * maxHeight < maxArea) continue;\n\n        let aRatios = aspectRatios;\n        if (!aRatios.length) {\n          const minAspectRatio = Math.max(options.minAspectRatio, options.minWidth / maxHeight, maxArea / (maxHeight * maxHeight));\n          const maxAspectRatio = Math.min(options.maxAspectRatio, maxWidth / options.minHeight, maxWidth * maxWidth / maxArea);\n          aRatios = range(minAspectRatio, maxAspectRatio + aspectRatioStep, aspectRatioStep);\n        }\n\n        for (let a = 0; a < aRatios.length; a++) {\n\n          const aRatio = aRatios[a];\n\n          // do a binary search to find the max width that works\n          let left = Math.max(options.minWidth, Math.sqrt(maxArea * aRatio));\n          let right = Math.min(maxWidth, maxHeight * aRatio);\n          if (right * maxHeight < maxArea) continue;\n\n          if (options.events && right - left >= widthStep) events.push({type: \"aRatio\", aRatio});\n\n          while (right - left >= widthStep) {\n            const width = (left + right) / 2;\n            const height = width / aRatio;\n            const [cx, cy] = origin;\n            let rectPoly = [\n              [cx - width / 2, cy - height / 2],\n              [cx + width / 2, cy - height / 2],\n              [cx + width / 2, cy + height / 2],\n              [cx - width / 2, cy + height / 2]\n            ];\n            rectPoly = polygonRotate(rectPoly, angleRad, origin);\n            const insidePoly = polygonInside(rectPoly, poly);\n            if (insidePoly) {\n              // we know that the area is already greater than the maxArea found so far\n              maxArea = width * height;\n              rectPoly.push(rectPoly[0]);\n              maxRect = {area: maxArea, cx, cy, width, height, angle: -angle, points: rectPoly};\n              left = width; // increase the width in the binary search\n            }\n            else {\n              right = width; // decrease the width in the binary search\n            }\n            if (options.events) events.push({type: \"rectangle\", areaFraction: width * height / area, cx, cy, width, height, angle, insidePoly});\n\n          }\n\n        }\n\n      }\n\n    }\n\n  }\n\n  if (options.cache) {\n    polyCache[cacheString] = maxRect;\n  }\n\n  return options.events ? Object.assign(maxRect || {}, {events}) : maxRect;\n\n}\n"],"names":["const","i","p1W","p2W","p1H","p2H","let"],"mappings":"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"}