{"version":3,"file":"path2polygon.js","sources":["../../../src/geom/path2polygon.js"],"sourcesContent":["import pointDistance from \"./pointDistance\";\nimport shapeEdgePoint from \"./shapeEdgePoint\";\n\nconst pi = Math.PI;\n\n/**\n    @function path2polygon\n    @desc Transforms a path string into an Array of points.\n    @param {String} path An SVG string path, commonly the \"d\" property of a <path> element.\n    @param {Number} [segmentLength = 20] The lenght of line segments when converting curves line segments. Higher values lower computation time, but will result in curves that are more rigid.\n    @returns {Array}\n*/\nexport default (path, segmentLength = 20) => {\n\n  const poly = [],\n        regex = /([MLA])([^MLAZ]+)/ig;\n\n  let match = regex.exec(path);\n  while (match !== null) {\n\n    if ([\"M\", \"L\"].includes(match[1])) poly.push(match[2].split(\",\").map(Number));\n    else if (match[1] === \"A\") {\n\n      const points = match[2].split(\",\").map(Number);\n\n      const last = points.slice(points.length - 2, points.length),\n            prev = poly[poly.length - 1],\n            radius = points[0],\n            width = pointDistance(prev, last);\n\n      let angle = Math.acos((radius * radius + radius * radius - width * width) / (2 * radius * radius));\n      if (points[2]) angle = pi * 2 - angle;\n\n      const step = angle / (angle / (pi * 2) * (radius * pi * 2) / segmentLength);\n      const start = Math.atan2(-prev[1], -prev[0]) - pi;\n      let i = step;\n      while (i < angle) {\n        poly.push(shapeEdgePoint(points[4] ? start + i : start - i, radius));\n        i += step;\n      }\n      poly.push(last);\n\n    }\n    match = regex.exec(path);\n\n  }\n\n  return poly;\n\n};\n"],"names":["const","let"],"mappings":"AAAA,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAC5C,OAAO,cAAc,MAAM,kBAAkB,CAAC;;AAE9CA,GAAK,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;;;;;;;;;AASnB,wBAAe,CAAC,IAAI,EAAE,aAAkB,EAAE,AAAG;+CAAV,GAAG;AAAQ;;EAE5CA,GAAK,CAAC,IAAI,GAAG,EAAE;QACT,KAAK,GAAG,qBAAqB,CAAC;;EAEpCC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC7B,OAAO,KAAK,KAAK,IAAI,EAAE;;IAErB,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAC;SACzE,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;;MAEzBD,GAAK,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;MAE/CA,GAAK,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC;YACrD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5B,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;YAClB,KAAK,GAAG,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;MAExCC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;MACnG,IAAI,MAAM,CAAC,CAAC,CAAC,IAAE,KAAK,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAC;;MAEtCD,GAAK,CAAC,IAAI,GAAG,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;MAC5EA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;MAClDC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;MACb,OAAO,CAAC,GAAG,KAAK,EAAE;QAChB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QACrE,CAAC,IAAI,IAAI,CAAC;OACX;MACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;KAEjB;IACD,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;GAE1B;;EAED,OAAO,IAAI,CAAC;;CAEb,CAAC;"}