{"version":3,"file":"polygonRayCast.js","sources":["../../../src/geom/polygonRayCast.js"],"sourcesContent":["import lineIntersection from \"./lineIntersection\";\nimport segmentBoxContains from \"./segmentBoxContains\";\nimport pointDistanceSquared from \"./pointDistanceSquared\";\n\n/**\n    @function polygonRayCast\n    @desc Gives the two closest intersection points between a ray cast from a point inside a polygon. The two points should lie on opposite sides of the origin.\n    @param {Array} poly The polygon to test against, which should be an `[x, y]` formatted Array.\n    @param {Array} origin The origin point of the ray to be cast, which should be an `[x, y]` formatted Array.\n    @param {Number} [alpha = 0] The angle in radians of the ray.\n    @returns {Array} An array containing two values, the closest point on the left and the closest point on the right. If either point cannot be found, that value will be `null`.\n*/\nexport default function(poly, origin, alpha = 0) {\n\n  const eps = 1e-9;\n  origin = [origin[0] + eps * Math.cos(alpha), origin[1] + eps * Math.sin(alpha)];\n  const [x0, y0] = origin;\n  const shiftedOrigin = [x0 + Math.cos(alpha), y0 + Math.sin(alpha)];\n\n  let idx = 0;\n  if (Math.abs(shiftedOrigin[0] - x0) < eps) idx = 1;\n  let i = -1;\n  const n = poly.length;\n  let b = poly[n - 1];\n  let minSqDistLeft = Number.MAX_VALUE;\n  let minSqDistRight = Number.MAX_VALUE;\n  let closestPointLeft = null;\n  let closestPointRight = null;\n  while (++i < n) {\n    const a = b;\n    b = poly[i];\n    const p = lineIntersection(origin, shiftedOrigin, a, b);\n    if (p && segmentBoxContains(a, b, p)) {\n      const sqDist = pointDistanceSquared(origin, p);\n      if (p[idx] < origin[idx]) {\n        if (sqDist < minSqDistLeft) {\n          minSqDistLeft = sqDist;\n          closestPointLeft = p;\n        }\n      }\n      else if (p[idx] > origin[idx]) {\n        if (sqDist < minSqDistRight) {\n          minSqDistRight = sqDist;\n          closestPointRight = p;\n        }\n      }\n    }\n  }\n\n  return [closestPointLeft, closestPointRight];\n\n}\n"],"names":["const","let"],"mappings":"AAAA,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAClD,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AACtD,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;;;;;;;;;;AAU1D,eAAe,SAAS,IAAI,EAAE,MAAM,EAAE,KAAS,EAAE;+BAAN,GAAG;AAAI;;EAEhDA,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC;EACjB,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;EAChF,AAAO;EAAI,mBAAa;EACxBA,GAAK,CAAC,aAAa,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnEC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;EACZ,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,IAAE,GAAG,GAAG,CAAC,GAAC;EACnDA,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACXD,GAAK,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;EACtBC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACpBA,GAAG,CAAC,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC;EACrCA,GAAG,CAAC,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC;EACtCA,GAAG,CAAC,gBAAgB,GAAG,IAAI,CAAC;EAC5BA,GAAG,CAAC,iBAAiB,GAAG,IAAI,CAAC;EAC7B,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE;IACdD,GAAK,CAAC,CAAC,GAAG,CAAC,CAAC;IACZ,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACZA,GAAK,CAAC,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,IAAI,CAAC,IAAI,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;MACpCA,GAAK,CAAC,MAAM,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;MAC/C,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,EAAE;QACxB,IAAI,MAAM,GAAG,aAAa,EAAE;UAC1B,aAAa,GAAG,MAAM,CAAC;UACvB,gBAAgB,GAAG,CAAC,CAAC;SACtB;OACF;WACI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,EAAE;QAC7B,IAAI,MAAM,GAAG,cAAc,EAAE;UAC3B,cAAc,GAAG,MAAM,CAAC;UACxB,iBAAiB,GAAG,CAAC,CAAC;SACvB;OACF;KACF;GACF;;EAED,OAAO,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;;CAE9C;"}