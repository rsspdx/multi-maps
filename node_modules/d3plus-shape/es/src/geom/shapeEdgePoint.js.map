{"version":3,"file":"shapeEdgePoint.js","sources":["../../../src/geom/shapeEdgePoint.js"],"sourcesContent":["const pi = Math.PI;\n\n/**\n    @function shapeEdgePoint\n    @desc Calculates the x/y position of a point at the edge of a shape, from the center of the shape, given a specified pixel distance and radian angle.\n    @param {Number} angle The angle, in radians, of the offset point.\n    @param {Number} distance The pixel distance away from the origin.\n    @returns {String} [shape = \"circle\"] The type of shape, which can be either \"circle\" or \"square\".\n*/\nexport default (angle, distance, shape = \"circle\") => {\n\n  if (angle < 0) angle = pi * 2 + angle;\n\n  if (shape === \"square\") {\n\n    const diagonal = 45 * (pi / 180);\n    let x = 0, y = 0;\n\n    if (angle < pi / 2) {\n      const tan = Math.tan(angle);\n      x += angle < diagonal ? distance : distance / tan;\n      y += angle < diagonal ? tan * distance : distance;\n    }\n    else if (angle <= pi) {\n      const tan = Math.tan(pi - angle);\n      x -= angle < pi - diagonal ? distance / tan : distance;\n      y += angle < pi - diagonal ? distance : tan * distance;\n    }\n    else if (angle < diagonal + pi) {\n      x -= distance;\n      y -= Math.tan(angle - pi) * distance;\n    }\n    else if (angle < 3 * pi / 2) {\n      x -= distance / Math.tan(angle - pi);\n      y -= distance;\n    }\n    else if (angle < 2 * pi - diagonal) {\n      x += distance / Math.tan(2 * pi - angle);\n      y -= distance;\n    }\n    else {\n      x += distance;\n      y -= Math.tan(2 * pi - angle) * distance;\n    }\n\n    return [x, y];\n\n  }\n  else if (shape === \"circle\") {\n    return [distance * Math.cos(angle), distance * Math.sin(angle)];\n  }\n  else return null;\n\n};\n"],"names":["const","tan","let"],"mappings":"AAAAA,GAAK,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;;;;;;;;;AASnB,wBAAe,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAgB,EAAE,AAAG;+BAAhB,GAAG;AAAc;;EAErD,IAAI,KAAK,GAAG,CAAC,IAAE,KAAK,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAC;;EAEtC,IAAI,KAAK,KAAK,QAAQ,EAAE;;IAEtBA,GAAK,CAAC,QAAQ,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;IACjCE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;;IAEjB,IAAI,KAAK,GAAG,EAAE,GAAG,CAAC,EAAE;MAClBF,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;MAC5B,CAAC,IAAI,KAAK,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,GAAG,CAAC;MAClD,CAAC,IAAI,KAAK,GAAG,QAAQ,GAAG,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC;KACnD;SACI,IAAI,KAAK,IAAI,EAAE,EAAE;MACpBA,GAAK,CAACC,KAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;MACjC,CAAC,IAAI,KAAK,GAAG,EAAE,GAAG,QAAQ,GAAG,QAAQ,GAAGA,KAAG,GAAG,QAAQ,CAAC;MACvD,CAAC,IAAI,KAAK,GAAG,EAAE,GAAG,QAAQ,GAAG,QAAQ,GAAGA,KAAG,GAAG,QAAQ,CAAC;KACxD;SACI,IAAI,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAE;MAC9B,CAAC,IAAI,QAAQ,CAAC;MACd,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,QAAQ,CAAC;KACtC;SACI,IAAI,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;MAC3B,CAAC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;MACrC,CAAC,IAAI,QAAQ,CAAC;KACf;SACI,IAAI,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,QAAQ,EAAE;MAClC,CAAC,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,CAAC;MACzC,CAAC,IAAI,QAAQ,CAAC;KACf;SACI;MACH,CAAC,IAAI,QAAQ,CAAC;MACd,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC;KAC1C;;IAED,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;GAEf;OACI,IAAI,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;GACjE;SACI,OAAO,IAAI,GAAC;;CAElB,CAAC;"}