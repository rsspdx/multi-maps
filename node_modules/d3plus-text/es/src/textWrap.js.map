{"version":3,"file":"textWrap.js","sources":["../../src/textWrap.js"],"sourcesContent":["import measure from \"./textWidth\";\nimport defaultSplit from \"./textSplit\";\nimport stringify from \"./stringify\";\nimport {trimRight} from \"./trim\";\n\n/**\n    @function textWrap\n    @desc Based on the defined styles and dimensions, breaks a string into an array of strings for each line of text.\n*/\nexport default function() {\n\n  let fontFamily = \"sans-serif\",\n      fontSize = 10,\n      fontWeight = 400,\n      height = 200,\n      lineHeight,\n      maxLines = null,\n      overflow = false,\n      split = defaultSplit,\n      width = 200;\n\n  /**\n      The inner return object and wraps the text and returns the line data array.\n      @private\n  */\n  function textWrap(sentence) {\n\n    sentence = stringify(sentence);\n\n    if (lineHeight === void 0) lineHeight = Math.ceil(fontSize * 1.4);\n\n    const words = split(sentence);\n\n    const style = {\n      \"font-family\": fontFamily,\n      \"font-size\": fontSize,\n      \"font-weight\": fontWeight,\n      \"line-height\": lineHeight\n    };\n\n    let line = 1,\n        textProg = \"\",\n        truncated = false,\n        widthProg = 0;\n\n    const lineData = [],\n          sizes = measure(words, style),\n          space = measure(\" \", style);\n\n    for (let i = 0; i < words.length; i++) {\n      let word = words[i];\n      const wordWidth = sizes[words.indexOf(word)];\n      word += sentence.slice(textProg.length + word.length).match(\"^( |\\n)*\", \"g\")[0];\n      if (textProg.slice(-1) === \"\\n\" || widthProg + wordWidth > width) {\n        if (!i && !overflow) {\n          truncated = true;\n          break;\n        }\n        lineData[line - 1] = trimRight(lineData[line - 1]);\n        line++;\n        if (lineHeight * line > height || wordWidth > width && !overflow || maxLines && line > maxLines) {\n          truncated = true;\n          break;\n        }\n        widthProg = 0;\n        lineData.push(word);\n      }\n      else if (!i) lineData[0] = word;\n      else lineData[line - 1] += word;\n      textProg += word;\n      widthProg += wordWidth;\n      widthProg += word.match(/[\\s]*$/g)[0].length * space;\n    }\n\n    return {\n      lines: lineData,\n      sentence, truncated,\n      widths: measure(lineData, style),\n      words\n    };\n\n  }\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets the font family accessor to the specified function or string and returns this generator. If *value* is not specified, returns the current font family.\n      @param {Function|String} [*value* = \"sans-serif\"]\n  */\n  textWrap.fontFamily = function(_) {\n    return arguments.length ? (fontFamily = _, textWrap) : fontFamily;\n  };\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets the font size accessor to the specified function or number and returns this generator. If *value* is not specified, returns the current font size.\n      @param {Function|Number} [*value* = 10]\n  */\n  textWrap.fontSize = function(_) {\n    return arguments.length ? (fontSize = _, textWrap) : fontSize;\n  };\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets the font weight accessor to the specified function or number and returns this generator. If *value* is not specified, returns the current font weight.\n      @param {Function|Number|String} [*value* = 400]\n  */\n  textWrap.fontWeight = function(_) {\n    return arguments.length ? (fontWeight = _, textWrap) : fontWeight;\n  };\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets height limit to the specified value and returns this generator. If *value* is not specified, returns the current value.\n      @param {Number} [*value* = 200]\n  */\n  textWrap.height = function(_) {\n    return arguments.length ? (height = _, textWrap) : height;\n  };\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets the line height accessor to the specified function or number and returns this generator. If *value* is not specified, returns the current line height accessor, which is 1.1 times the [font size](#textWrap.fontSize) by default.\n      @param {Function|Number} [*value*]\n  */\n  textWrap.lineHeight = function(_) {\n    return arguments.length ? (lineHeight = _, textWrap) : lineHeight;\n  };\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets the maximum number of lines allowed when wrapping.\n      @param {Function|Number} [*value*]\n  */\n  textWrap.maxLines = function(_) {\n    return arguments.length ? (maxLines = _, textWrap) : maxLines;\n  };\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets the overflow to the specified boolean and returns this generator. If *value* is not specified, returns the current overflow value.\n      @param {Boolean} [*value* = false]\n  */\n  textWrap.overflow = function(_) {\n    return arguments.length ? (overflow = _, textWrap) : overflow;\n  };\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets the word split function to the specified function and returns this generator. If *value* is not specified, returns the current word split function.\n      @param {Function} [*value*] A function that, when passed a string, is expected to return that string split into an array of words to textWrap. The default split function splits strings on the following characters: `-`, `/`, `;`, `:`, `&`\n  */\n  textWrap.split = function(_) {\n    return arguments.length ? (split = _, textWrap) : split;\n  };\n\n  /**\n      @memberof textWrap\n      @desc If *value* is specified, sets width limit to the specified value and returns this generator. If *value* is not specified, returns the current value.\n      @param {Number} [*value* = 200]\n  */\n  textWrap.width = function(_) {\n    return arguments.length ? (width = _, textWrap) : width;\n  };\n\n  return textWrap;\n\n}\n"],"names":["let","const"],"mappings":"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"}