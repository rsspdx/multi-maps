import {elem} from "d3plus-common";
import {saveElement} from "d3plus-export";
import {Button, Radio, Select} from "d3plus-form";
var formTypes = {Button: Button, Radio: Radio, Select: Select};

/**
    @function _drawLegend
    @desc Renders the legend if this._legend is not falsy.
    @param {Array} dara The filtered data array to be displayed.
    @private
*/
export default function() {
  var this$1 = this;


  var that = this;

  var areas = ["left", "right", "top", "bottom"];
  var loop = function ( a ) {
    var area = areas[a];
    var controls = (this$1._controls || []).filter(function (c) { return !c.position && area === "bottom" || c.position === area; });

    if (this$1._downloadButton && this$1._downloadPosition === area) {
      controls.push({
        data: [{text: "Download", value: 1}],
        label: "downloadButton",
        on: {
          click: function () {
            var resize = this$1._detectResize;
            if (resize) { this$1.detectResize(false).render(); }
            saveElement(this$1._select.node(), Object.assign({
              title: this$1._title || undefined
            }, this$1._downloadConfig), {
              callback: function () {
                setTimeout(function () {
                  if (resize) { this$1.detectResize(resize).render(); }
                }, 5000);
              }
            });
          }
        },
        type: "Button"
      });
    }

    var wide = area === "top" || area === "bottom";

    var transform = {
      height: wide ? this$1._height - (this$1._margin.top + this$1._margin.bottom) : this$1._height - (this$1._margin.top + this$1._margin.bottom + this$1._padding.top + this$1._padding.bottom),
      width: wide ? this$1._width - (this$1._margin.left + this$1._margin.right + this$1._padding.left + this$1._padding.right) : this$1._width - (this$1._margin.left + this$1._margin.right)
    };

    transform.x = (wide ? this$1._margin.left + this$1._padding.left : this$1._margin.left) + (area === "right" ? transform.width : 0);
    transform.y = (wide ? this$1._margin.top : this$1._margin.top + this$1._padding.top)  + (area === "bottom" ? transform.height : 0);

    var foreign = elem(("foreignObject.d3plus-viz-controls-" + area), {
      condition: controls.length,
      enter: Object.assign({opacity: 0}, transform),
      exit: Object.assign({opacity: 0}, transform),
      parent: this$1._select,
      transition: this$1._transition,
      update: {height: transform.height, opacity: 1, width: transform.width}
    });

    var container = foreign.selectAll("div.d3plus-viz-controls-container")
      .data([null]);

    container = container.enter().append("xhtml:div")
        .attr("class", "d3plus-viz-controls-container")
      .merge(container);

    if (controls.length) {

      var loop$1 = function ( i ) {

        var control = Object.assign({}, controls[i]);

        var on = {};
        if (control.on) {
          var loop$2 = function ( event ) {
            if ({}.hasOwnProperty.call(control.on, event)) {
              on[event] = function() {
                control.on[event].bind(that)(this.value);
              };
            }
          };

          for (var event in control.on) loop$2( event );

        }

        var id = control.label || (area + "-" + i);
        if (!this$1._controlCache[id]) {
          var type = control.type && formTypes[control.type] ? control.type : "Select";
          this$1._controlCache[id] = new formTypes[type]().container(container.node());
          if (control.checked) { this$1._controlCache[id].checked(control.checked); }
          if (control.selected) { this$1._controlCache[id].selected(control.selected); }
        }
        delete control.checked;
        delete control.selected;

        this$1._controlCache[id]
          .config(control)
          .config({on: on})
          .config(this$1._controlConfig)
          .render();

      };

      for (var i = 0; i < controls.length; i++) loop$1( i );

      container
          .style("display", ["top", "bottom"].includes(area) ? "block" : "inline-block")
          .style("text-align", ["top", "bottom"].includes(area) ? "center" : area);

      var bounds = container.node().getBoundingClientRect();

      foreign.transition(this$1._transition)
        .attr("x", transform.x - (area === "right" ? bounds.width : 0))
        .attr("y", transform.y - (area === "bottom" ? bounds.height : 0));

      this$1._margin[area] += ["top", "bottom"].includes(area) ? bounds.height : bounds.width;

    }

  };

  for (var a = 0; a < areas.length; a++) loop( a );

}

//# sourceMappingURL=_drawControls.js.map