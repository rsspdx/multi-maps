{"version":3,"file":"load.js","sources":["../../../src/data/load.js"],"sourcesContent":["import {csv, json, text, tsv} from \"d3-request\";\nimport {default as fold} from \"./fold\";\n\n/**\n  @function dataLoad\n  @desc Loads data from a filepath or URL, converts it to a valid JSON object, and returns it to a callback function.\n  @param {Array|String} path The path to the file or url to be loaded. If an Array is passed, the xhr request logic is skipped.\n  @param {Function} [formatter] An optional formatter function that is run on the loaded data.\n  @param {String} [key] The key in the `this` context to save the resulting data to.\n  @param {Function} [callback] A function that is called when the final data is loaded. It is passed 2 variables, any error present and the data loaded.\n*/\nexport default function(path, formatter, key, callback) {\n\n  if (typeof path !== \"string\") {\n\n    const data = formatter ? formatter(path) : path;\n    if (key && `_${key}` in this) this[`_${key}`] = data;\n    if (callback) callback(null, data);\n\n  }\n  else {\n\n    const parser = path.slice(path.length - 4) === \".csv\" ? csv\n      : path.slice(path.length - 4) === \".tsv\" ? tsv\n      : path.slice(path.length - 4) === \".txt\" ? text\n      : json;\n\n    parser(path, (err, data) => {\n\n      if (parser !== json && !err && data && data instanceof Array) {\n        data.forEach(d => {\n          for (const k in d) {\n            if (!isNaN(d[k])) d[k] = parseFloat(d[k]);\n            else if (d[k].toLowerCase() === \"false\") d[k] = false;\n            else if (d[k].toLowerCase() === \"true\") d[k] = true;\n            else if (d[k].toLowerCase() === \"null\") d[k] = null;\n            else if (d[k].toLowerCase() === \"undefined\") d[k] = undefined;\n          }\n        });\n      }\n\n      data = err ? [] : formatter ? formatter(data) : data;\n      if (data && !(data instanceof Array) && data.data && data.headers) data = fold(data);\n      if (key && `_${key}` in this) this[`_${key}`] = data;\n      if (this._cache) this._lrucache.set(path, data);\n      if (callback) callback(err, data);\n\n    });\n\n  }\n\n}\n"],"names":["const","this"],"mappings":"AAAA,QAAQ,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,YAAY,CAAC;AAChD,QAAQ,OAAO,IAAI,IAAI,OAAO,QAAQ,CAAC;;;;;;;;;;AAUvC,eAAe,SAAS,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE;;AAAC;;EAEvD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;;IAE5BA,GAAK,CAAC,IAAI,GAAG,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IAChD,IAAI,GAAG,IAAI,OAAI,GAAG,CAAE,IAAI,IAAI,IAAE,IAAI,CAAC,OAAI,GAAG,CAAE,CAAC,GAAG,IAAI,GAAC;IACrD,IAAI,QAAQ,IAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,GAAC;;GAEpC;OACI;;IAEHA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,MAAM,GAAG,GAAG;QACvD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,MAAM,GAAG,GAAG;QAC5C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,MAAM,GAAG,IAAI;QAC7C,IAAI,CAAC;;IAET,MAAM,CAAC,IAAI,WAAE,CAAC,GAAG,EAAE,IAAI,EAAE,AAAG;;MAE1B,IAAI,MAAM,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,YAAY,KAAK,EAAE;QAC5D,IAAI,CAAC,OAAO,WAAC,EAAC,CAAC,AAAG;UAChB,KAAKA,GAAK,CAAC,CAAC,IAAI,CAAC,EAAE;YACjB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC;iBACrC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,OAAO,IAAE,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,GAAC;iBACjD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,IAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAC;iBAC/C,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,IAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAC;iBAC/C,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,WAAW,IAAE,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,GAAC;WAC/D;SACF,CAAC,CAAC;OACJ;;MAED,IAAI,GAAG,GAAG,GAAG,EAAE,GAAG,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;MACrD,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,YAAY,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,IAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAC;MACrF,IAAI,GAAG,IAAI,OAAI,GAAG,CAAE,IAAIC,MAAI,IAAEA,MAAI,CAAC,OAAI,GAAG,CAAE,CAAC,GAAG,IAAI,GAAC;MACrD,IAAIA,MAAI,CAAC,MAAM,IAAEA,MAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,GAAC;MAChD,IAAI,QAAQ,IAAE,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,GAAC;;KAEnC,CAAC,CAAC;;GAEJ;;CAEF;"}